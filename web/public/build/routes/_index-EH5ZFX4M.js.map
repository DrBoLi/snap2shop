{
  "version": 3,
  "sources": ["empty-module:../shopify.server", "../../../app/routes/_index.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1757480521043.4695\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { authenticate } from \"../shopify.server\";\nimport React from \"react\";\nimport { Page, Layout, Text, Card, BlockStack, InlineStack, Badge, ProgressBar, Banner, EmptyState, Spinner } from \"@shopify/polaris\";\nimport { useState, useEffect, useCallback } from \"react\";\nexport const loader = async ({\n  request\n}) => {\n  const {\n    admin,\n    session\n  } = await authenticate.admin(request);\n  const shopDomain = session.shop;\n\n  // Get index status from our backend\n  let indexStatus = null;\n  try {\n    const response = await fetch(`${process.env.BACKEND_URL}/admin/index/status/${shopDomain}`);\n    if (response.ok) {\n      indexStatus = await response.json();\n    }\n  } catch (error) {\n    console.error(\"Failed to fetch index status:\", error);\n  }\n  return json({\n    shopDomain,\n    indexStatus,\n    backendUrl: process.env.BACKEND_URL || \"http://localhost:8000\"\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const {\n    session\n  } = await authenticate.admin(request);\n  const formData = await request.formData();\n  const action = formData.get(\"action\");\n  if (action === \"start_indexing\") {\n    try {\n      const indexFormData = new FormData();\n      indexFormData.append(\"shop_domain\", session.shop);\n      const response = await fetch(`${process.env.BACKEND_URL}/admin/index`, {\n        method: \"POST\",\n        body: indexFormData\n      });\n      if (response.ok) {\n        const result = await response.json();\n        return json({\n          success: true,\n          jobId: result.job_id\n        });\n      } else {\n        return json({\n          success: false,\n          error: \"Failed to start indexing\"\n        });\n      }\n    } catch (error) {\n      return json({\n        success: false,\n        error: error.message\n      });\n    }\n  }\n  return json({\n    success: false,\n    error: \"Unknown action\"\n  });\n};\nexport default function Index() {\n  _s();\n  const {\n    shopDomain,\n    indexStatus: initialStatus,\n    backendUrl\n  } = useLoaderData();\n  const submit = useSubmit();\n  const [indexStatus, setIndexStatus] = useState(initialStatus);\n  const [isPolling, setIsPolling] = useState(false);\n  const fetchStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`${backendUrl}/admin/index/status/${shopDomain}`);\n      if (response.ok) {\n        const data = await response.json();\n        setIndexStatus(data);\n        return data;\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch status:\", error);\n    }\n    return null;\n  }, [backendUrl, shopDomain]);\n  const startIndexing = () => {\n    const formData = new FormData();\n    formData.append(\"action\", \"start_indexing\");\n    submit(formData, {\n      method: \"post\"\n    });\n    setIsPolling(true);\n  };\n\n  // Poll for status updates\n  useEffect(() => {\n    let interval;\n    if (isPolling || indexStatus?.status === \"running\" || indexStatus?.status === \"queued\") {\n      interval = setInterval(async () => {\n        const status = await fetchStatus();\n        if (status && (status.status === \"done\" || status.status === \"error\")) {\n          setIsPolling(false);\n        }\n      }, 3000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPolling, indexStatus?.status, fetchStatus]);\n  const getStatusBadge = status => {\n    const statusMap = {\n      queued: {\n        tone: \"info\",\n        children: \"Queued\"\n      },\n      running: {\n        tone: \"attention\",\n        children: \"Running\"\n      },\n      done: {\n        tone: \"success\",\n        children: \"Completed\"\n      },\n      error: {\n        tone: \"critical\",\n        children: \"Error\"\n      },\n      no_jobs: {\n        tone: \"subdued\",\n        children: \"Not Started\"\n      }\n    };\n    const config = statusMap[status] || statusMap.no_jobs;\n    return <Badge tone={config.tone}>{config.children}</Badge>;\n  };\n  const getProgressPercentage = () => {\n    if (!indexStatus || indexStatus.total === 0) return 0;\n    return Math.round(indexStatus.processed / indexStatus.total * 100);\n  };\n  return <Page title=\"Snap2Shop\" subtitle=\"Manage your visual search functionality\">\n      <Layout>\n        <Layout.Section>\n          <Card>\n            <BlockStack gap=\"400\">\n              <InlineStack align=\"space-between\">\n                <BlockStack gap=\"200\">\n                  <Text variant=\"headingMd\" as=\"h2\">\n                    Product Indexing\n                  </Text>\n                  <Text variant=\"bodyMd\" tone=\"subdued\">\n                    Index your products for visual search\n                  </Text>\n                </BlockStack>\n                {getStatusBadge(indexStatus?.status || \"no_jobs\")}\n              </InlineStack>\n\n              {indexStatus && indexStatus.status !== \"no_jobs\" && <BlockStack gap=\"200\">\n                  {indexStatus.status === \"running\" && <>\n                      <ProgressBar progress={getProgressPercentage()} size=\"medium\" />\n                      <Text variant=\"bodyMd\">\n                        Processing {indexStatus.processed} of {indexStatus.total} products\n                      </Text>\n                    </>}\n\n                  {indexStatus.product_count > 0 && <Text variant=\"bodyMd\">\n                      <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"span\">\n                        {indexStatus.product_count}\n                      </Text>{\" \"}\n                      products indexed\n                    </Text>}\n\n                  {indexStatus.started_at && <Text variant=\"bodySm\" tone=\"subdued\">\n                      Started: {new Date(indexStatus.started_at).toLocaleString()}\n                    </Text>}\n\n                  {indexStatus.finished_at && <Text variant=\"bodySm\" tone=\"subdued\">\n                      Finished: {new Date(indexStatus.finished_at).toLocaleString()}\n                    </Text>}\n\n                  {indexStatus.error && <Banner tone=\"critical\">\n                      <Text variant=\"bodyMd\">{indexStatus.error}</Text>\n                    </Banner>}\n                </BlockStack>}\n\n              {(!indexStatus || indexStatus.status === \"no_jobs\" || indexStatus.status === \"done\") && <EmptyState heading={indexStatus?.product_count > 0 ? \"Indexing Complete\" : \"Get Started\"} action={{\n              content: indexStatus?.product_count > 0 ? \"Re-index Products\" : \"Index Products\",\n              onAction: startIndexing\n            }} image=\"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\">\n                  <Text variant=\"bodyMd\">\n                    {indexStatus?.product_count > 0 ? \"Your products are indexed and ready for visual search.\" : \"Index your product catalog to enable visual search functionality.\"}\n                  </Text>\n                </EmptyState>}\n\n              {(isPolling || indexStatus?.status === \"running\" || indexStatus?.status === \"queued\") && <InlineStack align=\"center\" gap=\"200\">\n                  <Spinner size=\"small\" />\n                  <Text variant=\"bodyMd\">Indexing in progress...</Text>\n                </InlineStack>}\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n\n        <Layout.Section variant=\"oneThird\">\n          <BlockStack gap=\"400\">\n            <Card>\n              <BlockStack gap=\"400\">\n                <Text variant=\"headingMd\" as=\"h3\">\n                  Quick Stats\n                </Text>\n                <BlockStack gap=\"200\">\n                  <InlineStack align=\"space-between\">\n                    <Text variant=\"bodyMd\">Products Indexed</Text>\n                    <Text variant=\"bodyMd\" fontWeight=\"bold\">\n                      {indexStatus?.product_count || 0}\n                    </Text>\n                  </InlineStack>\n                  <InlineStack align=\"space-between\">\n                    <Text variant=\"bodyMd\">Status</Text>\n                    {getStatusBadge(indexStatus?.status || \"no_jobs\")}\n                  </InlineStack>\n                </BlockStack>\n              </BlockStack>\n            </Card>\n\n            <Card>\n              <BlockStack gap=\"400\">\n                <Text variant=\"headingMd\" as=\"h3\">\n                  Phase 0 Features\n                </Text>\n                <BlockStack gap=\"200\">\n                  <Text variant=\"bodyMd\">\u2705 Manual product indexing</Text>\n                  <Text variant=\"bodyMd\">\u2705 Visual similarity search</Text>\n                  <Text variant=\"bodyMd\">\u2705 Theme app embed widget</Text>\n                  <Text variant=\"bodyMd\">\u23F3 Auto-sync (Phase 1)</Text>\n                  <Text variant=\"bodyMd\">\u23F3 Advanced analytics (Phase 1)</Text>\n                </BlockStack>\n              </BlockStack>\n            </Card>\n          </BlockStack>\n        </Layout.Section>\n      </Layout>\n    </Page>;\n}\n_s(Index, \"8+XncaQhyMgUC/pif28WonWBDG4=\", false, function () {\n  return [useLoaderData, useSubmit];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
